sudo: required
dist: xenial
#group: deprecated-2017Q4
language: cpp

cache:
  directories:
    - $HOME/.conan

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
#      - sourceline: deb http://apt.llvm.org/xenial/ llvm-toolchain-precise-7.0 main
#        key_url: http://apt.llvm.org/llvm-snapshot.gpg.key
    packages:
      - g++-7
#      - clang-7.0

branches:
  except: /pr\/.*/

matrix:
  include:
    #
    # Mac Clang, Debug & Release
    #
    - os: osx
      compiler: clang
      osx_image: xcode10.2
      before_install:
        - brew update
        #- brew upgrade python
        - pip3 install --no-cache-dir pyyaml
        - pip3 install --user conan
        - export PATH=$PATH:/Users/travis/Library/Python/3.7/bin
        - ./enhance_conan.sh

      env:
        build_type=debug
        options=""

    - os: osx
      compiler: clang
      osx_image: xcode10.2
      before_install:
        - brew update
        #- brew upgrade python
        - pip3 install --no-cache-dir pyyaml
        - pip3 install --user conan
        - export PATH=$PATH:/Users/travis/Library/Python/3.7/bin
        - ./enhance_conan.sh

      env:
        build_type=release
        options=""

    #
    # Linux Clang, Debug & Release, with and without coroutines
    #
    - os: linux
      compiler: clang
      env:
        build_type=debug
        options=""

    - os: linux
      compiler: clang
      env:
        build_type=release
        options=""

#    - os: linux
#      compiler: clang
#      env:
#        build_type=debug
#        options="-Dstlab.coroutines=ON"
#
#    - os: linux
#      compiler: clang
#      env:
#        build_type=release
#        options="-Dstlab.coroutines=ON"

    #
    # Linux GCC, Debug & Release
    #
    - os: linux
      compiler: gcc
      env:
        build_type=debug
        options=""

    - os: linux
      compiler: gcc
      env:
        build_type=release
        options=""

    #
    # Address sanitizer
    #
    - os: linux
      compiler: clang
      env:
        build_type=debug
        flags="-fsanitize=address -fno-omit-frame-pointer -fno-sanitize-recover=all"
        options=""

    #
    # Undefined behavior sanitizer
    #
    - os: linux
      compiler: clang
      env:
        build_type=debug
        flags="-fsanitize=undefined -fno-omit-frame-pointer -fno-sanitize-recover=all"
        options=""

    #
    # Thread sanitizer
    #
    - os: linux
      compiler: clang
      env:
        build_type=debug
        TSAN_OPTIONS="suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions"
        flags="-fsanitize=thread -fno-omit-frame-pointer -fno-sanitize-recover=all"
        options=""

    #
    # Coverage
    #
    - os: linux
      compiler: gcc
      env:
        build_type=debug
        coverage=TRUE
        options="-D stlab.coverage=ON"
      packages:
        - lcov
      after_success:
        - cd build
        - bash <(curl -s https://codecov.io/bash) -X fix

    #
    # Coverity
    #
    - os: linux
      compiler: clang
      env:
        build_type=debug
        options=""
      before_install:
        - pip install --user conan
        - ./enhance_conan.sh
        - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

      coverity_scan:
          project:
            name: "stlab/libraries"
            description: "Build submitted via Travis CI"
          notification_email: fosterb@gmail.com
          build_command_prepend: ""
          build_command: ".travis/build.sh"
          branch_pattern: coverity


before_install:
  - pip install --user conan
  - ./enhance_conan.sh


install:
  ############################################################################
  # All the dependencies are installed in ${HOME}/deps/
  ############################################################################
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.10/cmake-3.10.0-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  ############################################################################
  # Go back to the root of the project and setup the build directory
  ############################################################################  
  - cd "${TRAVIS_BUILD_DIR}"


script:
  - .travis/build.sh


notifications:
  recipients:
    - felix@petriconi.net
  email:
    on_success: change
    on_failure: always
  slack:
    on_success: always
    on_failure: always
    rooms:
      secure: wVoguAsrN2FIKS3TyxQeg0SvIySuaUu1lRgO1KQBoOeLOBUedNy90futkLyPVMs1snK3M2aq6iMW5OqWRq/GdKXbfjFTpiUcObolq7tOXaXwwCAUufC+tCYpQqzZaKbw2lhWqTd4xd/GzmupRBEVeW3pKPR/avLCLUq/uJtz2MvAOFE6u0uvIPqvIgaEPq8tQ5qPNn8oTiU7uozqXk+/aQxMoj/W+mK6r/U8ISQM8DNRJy1k+WadfPfarTH21rJgfsZbWoKHjhxc5ysk+VPnTu7gg1rBcSu2Q/91LNQTSUBGNvd+bjyQ55zaCjZOsz832AmIOjy06OtpvvYbeJRtw+saJv44LTbwjiIwyAUCnPB0D9pnyA5NIdBOsGNuwWuyBrtawzbum71tdAjW/PpMgm5vT5ouLWWw9+0zk0nR0E3fxY0KodUKz8Ct6qwwtt3HfcD1Q1NU1wBOzfAROOi3CeazOOpbsLC///ysuxhIkJBd068b+/EUSyEuQNUkMJj8EC2DxNtsZrk6/tihnATbdWb4o/0D2t0MqGsYmOPeWAtaTyeOkr9nLYxSbwC94mu8YmNN9A9/FJKd0Pa0IKACLvgup0sAXLOJjPEfvYz1s8WQBAlCe03NOS/9eOrSXv2nKFw/YiMinBUEqQfrucwV7vfD0m2LsE1S+u4N5ozqw48=
